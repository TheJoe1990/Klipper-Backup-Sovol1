[gcode_macro mainled_on]
gcode:
    SET_PIN PIN=main_led VALUE=1

[gcode_macro mainled_off]
gcode:
    SET_PIN PIN=main_led VALUE=0

#--------------------------------------------------------------------#
#--------------------------------------------------------------------#

[force_move]
enable_force_move: True

[gcode_macro _global_var]
variable_pause_park:{'x': 175, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park:{'x': 175, 'y': 0, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 345
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 65
variable_load_filament_extruder_temp: 230
variable_heat_soak_time: 0 # in minutes
variable_active_tool: 0
variable_active_tool_temp: 0
gcode:

[gcode_macro START_PRINT]
description: Start print macro with extended heatsoak logic and fun message
variable_state: 'Prepare'
variable_record_extruder_temp: 0
variable_max_record_extruder_temp: 0
variable_printing: False
variable_tools_used_during_print: []
gcode:
    {% set bedtemp = params.BED_TEMP|default(60)|int %}
    {% set hotendtemp = params.EXTRUDER_TEMP|default(230)|int %}
    {% set heatsoak = params.HEATSOAK|default(True)|int %}
    {% set heatsoak_time = params.HEATSOAK_TIME|default(10)|int %} ; Default heatsoak time to 10 minutes
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set bed_target_temp = bedtemp|int %}
    {% set extruder_target_temp = 125 %}
    {% set active_tool = params.TOOL|default(0)|int %}
    {% set final_tool_temp = params.TOOL_TEMP|default(hotendtemp)|int %}
    RESPOND TYPE='echo' MSG="DEBUG: All received parameters: {params}"


    #RESPOND TYPE='echo' MSG="DEBUG: All received parameters: {params.keys()}"

    ; Ensure previous commands are completed
    M400

    ; Clear any paused state
    CLEAR_PAUSE

    ; Set minimum bed temperature for mesh calibration
    {% if bed_target_temp <= mesh_calibrate_temp %}
        {% set bed_target_temp = mesh_calibrate_temp %}
    {% endif %}

    ; --- Initialization Section ---
    M117 Initializing
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=printing VALUE=False

    {% set tools_used_during_print = [] %}
    {% for tool_nr in range(6) %} ; Checking up to six tools (T0-T5)
      {% set tooltemp_param = 'T' ~ tool_nr|string ~ '_TEMP' %}
      {% if tooltemp_param in params and params[tooltemp_param]|int > 0 %}
        {% set _ = tools_used_during_print.append(tool_nr) %}
      {% endif %}
    {% endfor %}
    
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=tools_used_during_print VALUE="{tools_used_during_print}"
    RESPOND TYPE='echo' MSG="The print uses the following tools: {tools_used_during_print|join(' ')}. M104 will be ignored for all other tools while the print is active"


    ; Start macro execution
    G90 ; Set absolute positioning
    {% if state == 'Prepare' %}
        {action_respond_info("Prepare!")}

        ; Home all axes if not already homed
        {% if printer.toolhead.homed_axes|lower != "xyz" %}
            M117 Homing all axes...
            G28 ; Home all axes
        {% endif %}
    {% endif %}

        ; Start exhaust fan
        M117 Starting exhaust fan...
        SET_FAN_SPEED FAN=exhaust_fan SPEED=1

        M117 Heating bed to {bed_target_temp}°C and active nozzle to {extruder_target_temp}°C...
        M140 S{bed_target_temp} ; Set bed temperature

        T0
        
        M104 S{extruder_target_temp} ; Set active tool nozzle to initial temperature

        UPDATE_LEDS
    
        M117 Performing Quad Gantry Leveling...
        QUAD_GANTRY_LEVEL
        CENTER

        ; --- Preheat non-active tools sequentially before heatsoak ---
        #{% for tool_nr in printer.toolchanger.tool_numbers %}
        #    {% if tool_nr != active_tool %}
        #        {% set idle_param = 'T' ~ tool_nr|string ~ '_IDLE_TEMP' %}
        #        {% if idle_param in params %}
        #            M117 Preheating Tool T{tool_nr}...
        #            M104 T{tool_nr} S{params[idle_param]} ; Set idle temp for tool {tool_nr}
        #            {% set sensor_name = "extruder" ~ tool_nr|string %}
        #            TEMPERATURE_WAIT SENSOR={sensor_name} MINIMUM={params[idle_param]} TIMEOUT=60
        #        {% endif %}
        #    {% endif %}
        #{% endfor %}

            ; --- Preheat all tools used in the print sequentially ---
    {% for tool_nr in tools_used_during_print %}
        M117 Preheating Tool T{tool_nr}...
        M104 T{tool_nr} S{final_tool_temp if tool_nr == active_tool else params.get('T' ~ tool_nr|string ~ '_IDLE_TEMP', extruder_target_temp)}
        {% set sensor_name = "extruder" ~ tool_nr|string %}
        TEMPERATURE_WAIT SENSOR={sensor_name} MINIMUM={final_tool_temp if tool_nr == active_tool else params.get('T' ~ tool_nr|string ~ '_IDLE_TEMP', extruder_target_temp)}
    {% endfor %}
    
        M117 Wait for bed to reach final temperature
        M190 S{bed_target_temp} ; Wait for bed to reach final temperature

        UPDATE_LEDS

    ; Conditional heatsoak logic
    {% if heatsoak == True %}
        {% if bed_target_temp > 90 %}
            ; If bed temp is >90°C, wait for heatsoak_time (default 10 mins) or T0 ≥ 42°C
            M117 Heatsoaking for {heatsoak_time} mins or until T0 >= 42°C...
            G1 X150 Y150 Z15 F9000 ; Move to center of the bed
            ; Manual countdown display for up to 10 mins
            M117 Heatsoak: 10 min remaining...
            G4 P60000
            M117 Heatsoak: 9 min remaining...
            G4 P60000
            M117 Heatsoak: 8 min remaining...
            G4 P60000
            M117 Heatsoak: 7 min remaining...
            G4 P60000
            M117 Heatsoak: 6 min remaining...
            G4 P60000
            M117 Heatsoak: 5 min remaining...
            G4 P60000
            M117 Heatsoak: 4 min remaining...
            G4 P60000
            M117 Heatsoak: 3 min remaining...
            G4 P60000
            M117 Heatsoak: 2 min remaining...
            G4 P60000
            M117 Heatsoak: 1 min remaining...
            G4 P60000
            M117 Ensuring T0 >= 42°C...
            TEMPERATURE_WAIT SENSOR="temperature_sensor T0" MINIMUM=42 ; Wait until T0 reaches 42°C
        {% else %}
            ; If bed temp is ≤90°C, only heatsoak for 5 minutes (ignores T0)
            M117 Heatsoaking for 5 mins (bed temp ≤ 90°C)...
            G1 X150 Y150 Z15 F9000 ; Move to center of the bed
            M117 Heatsoak: 5 min remaining...
            G4 P60000
            M117 Heatsoak: 4 min remaining...
            G4 P60000
            M117 Heatsoak: 3 min remaining...
            G4 P60000
            M117 Heatsoak: 2 min remaining...
            G4 P60000
            M117 Heatsoak: 1 min remaining...
            G4 P60000
        {% endif %}
    {% endif %}

        ; Perform Quad Gantry Leveling
        M117 Performing Quad Gantry Leveling...
        QUAD_GANTRY_LEVEL

        ; Home all-axis after calibration
        CENTER
        M117 Homing Z One More Time
        G28

        ; Perform Bed Mesh Calibration
        M117 Performing Bed Mesh Calibration...
        BED_MESH_CALIBRATE ADAPTIVE=1

        ; --- Grab the first toolhead to be used for printing ---
        {% if tools_used_during_print|length > 0 %}
            {% set first_tool = tools_used_during_print[0] %}
            T{first_tool}
            M117 Selected first toolhead: T{first_tool}
        {% endif %}

        ; --- Park toolhead after calibration ---
        M117 Parking toolhead...
        Smart_Park
     
        ; --- Switch to active tool and final heating ---
        T{active_tool}
        M117 Final heating active tool (T{active_tool}) to {final_tool_temp}°C...
        M104 T{active_tool} S{final_tool_temp} ; Set active tool nozzle to final printing temperature
        M190 S{bed_target_temp}           ; Wait for bed to re-stabilize
        M109 T{active_tool} S{final_tool_temp} ; Wait for active tool to reach final temperature
    
        M117 Purging nozzle...
        LINE_PURGE
    
        M117 Printer Go BRRRRRRR


[gcode_macro END_PRINT]
description: Ends the print and performs cleanup
variable_state: 'normal'
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set current_z = printer.gcode_move.position.z|float %}

    M400
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

    M117 Print Complete!
    G91  ; Relative positioning

    ; Lift Z to avoid collisions
    {% if (printer.gcode_move.position.z + 50) < z_max %}
        G1 Z25 F3000
    {% else %}
        G1 Z{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}

    G90  ; Absolute positioning

    ; Switch to T0 (toolhead 0) for extruder shutdown and parking
    T0

    ; Turn off all extruders
    {% for tool_nr in printer.toolchanger.tool_numbers %}
        M104 T{tool_nr} S0 ; Turn off extruder heater for tool {tool_nr}
    {% endfor %}

    ; Parking logic: if current Z > 150 park at X175 Y340, otherwise park at X175 Y0 and ensure Z is at least 100
    {% if current_z > 150 %}
        M117 Parking at X175 Y340...
        G1 X175 Y340 F6000
    {% else %}
        M117 Parking at X175 Y0...
        {% if current_z < 100 %}
            G1 Z100 F3000
        {% endif %}
        G1 X175 Y0 F6000
    {% endif %}

    TURN_OFF_HEATERS

        M117 Print Complete - Turning Off LEDs
        SET_LED LED=T0_hotend_rgb RED=0 GREEN=0 BLUE=0
        SET_LED LED=T1_hotend_rgb RED=0 GREEN=0 BLUE=0

    ; Run exhaust fan for 10 minutes before shutting it off
    M117 Running exhaust fan for 10 minutes...
    G4 P600000  ; Wait 10 minutes (600,000 ms)
    _ALL_FAN_OFF
    M117 Exhaust fan off.

    M84 X Y Z E  ; Disable motors

    M220 S100
    M221 S100

    CLEAR_PAUSE

    M117 Ready
    {action_respond_info("Finish Print!")}

    
[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% if not printer.pause_resume.is_paused %}
        {% set current_z = printer.gcode_move.position.z|float %}
        {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}

        PAUSE_BASE
        M117 Pausing Print...
        G91  ; Relative positioning

        ; Lift Z to avoid collisions
        {% if (printer.gcode_move.position.z + 5) < z_max %}
            G1 Z5 F3000
        {% else %}
            {% set z_offset = (z_max - printer.gcode_move.position.z) | int %}
            G1 Z{z_offset} F3000
        {% endif %}

        G90  ; Absolute positioning

        ; Parking logic:
        ; If current Z > 150 mm, park at X175 Y340;
        ; otherwise, if current Z is below 100, raise to Z100 and park at X175 Y0.
        {% if current_z > 150 %}
            M117 Parking at X175 Y340...
            G1 X175 Y340 F6000
        {% else %}
            M117 Parking at X175 Y0...
            {% if current_z < 100 %}
                G1 Z100 F3000
            {% endif %}
            G1 X175 Y0 F6000
        {% endif %}

        ; Set Idle Timeout (12-hour timeout)
        SET_IDLE_TIMEOUT TIMEOUT=43200

        {action_respond_info("Print paused!")}
    {% endif %}


[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% if printer.pause_resume.is_paused %}
        M117 Resuming Print...

        ; Retrieve stored extruder target temperature from globals
        {% set active_tool = printer['gcode_macro _global_var'].active_tool %}
        {% set resume_extruder_temp = printer['gcode_macro _global_var'].active_tool_temp|int %}
        {% set bed_target_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}

        ; Ensure tool selection before setting temperature
        T{active_tool}
        
        ; Set extruder and bed temperature if needed
        {% if resume_extruder_temp > 0 %}
            M104 S{resume_extruder_temp}      ; Set extruder temperature
            M109 S{resume_extruder_temp}      ; Wait for extruder to reach target
        {% endif %}
        
        {% if bed_target_temp > 0 %}
            M140 S{bed_target_temp}  ; Restore bed temperature
            M190 S{bed_target_temp}  ; Wait for bed to reach target
        {% endif %}

        ; Ensure head is at the pause park position before priming and wiggle
        {% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
        {% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
        G90                             ; Absolute positioning
        G1 X{x_park} Y{y_park} F9000

        ; Priming and Wiggle sequence
        M117 Priming and Wiggle...
        G91                             ; Relative positioning
        M83                             ; Use relative extruder moves
        G1 E40 F200                     ; Extrude 40mm for priming
        G4 P2000                        ; Wait 2 seconds for pressure stabilization
        G1 X20 F15000                   ; Wiggle motion
        G1 X-20
        G1 X20
        G1 X-20
        G1 X20
        G1 X-20
        G90                             ; Return to absolute positioning

        ; Restore saved state (this brings back the pre-pause position)
        RESTORE_GCODE_STATE NAME=PAUSE_STATE

        ; Re-select the active tool from the global variable
        T{active_tool}

        M117 Resuming Print...
        {action_respond_info("Print resuming!")}
        
        ; Retrieve the filament retraction value (if any) from pause configuration
        {% set e_retract = printer['gcode_macro _global_var'].pause_park.e|float %}
        G91
        G1 E{e_retract} F300  ; Push filament to counteract pause retraction
        G90
        
        M117 Printing now!!!
        RESUME_BASE
    {% endif %}



[delayed_gcode exhaust_fan_off]
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    # Run the exhaust fan for another 2min after the other fans and then turn it off
    # UPDATE_DELAYED_GCODE ID=exhaust_fan_off DURATION=120
    M107

[gcode_macro CLEAN_NOZZLE] 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
       G28
    {% endif %}
    G90 
    G1 X348 Y0 Z0.3 F9000
    M117 Nozzle heating...
    M109 S200
    G91
    G1 Z10 F300
    G90
    M106 S255
    M104 S130
    M117 Clean nozzle
    G1 X315 Y360 F9000
    G1 Z0.2 F300
    G1 X352 F4500
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X325
    G1 Y356 X324 Z5
    G1 Z0.2
    G1 Y360 X324
    G1 Y357 X326
    G1 Y360 X326
    G1 Y357 X328
    G1 Y360 X330
    G1 Y357 X332
    G1 Y360 X334
    G1 Y357 X336
    G1 Y360 X338
    G1 Y357 X340
    G1 Y360 X324
    G1 Y357 X326
    G1 Y360 X326
    G1 Y357 X328
    G1 Y360 X330
    G1 Y357 X332
    G1 Y360 X334
    G1 Y357 X336
    G1 Y360 X338
    G1 Y357 X340
    G1 Y360 X324
    G1 Y357 X326
    G1 Y360 X326
    G1 Y357 X328
    G1 Y360 X330
    G1 Y357 X332
    G1 Y360 X334
    G1 Y357 X336
    G1 Y360 X338
    M400
    M117 Finished cleaning
    M109 S130
    M107 
    G91
    G1 Z10 F300
    G90
    G28 Z0

# Bring the nozzle to the center of the bed
[gcode_macro CENTER]
gcode:
    G0  X175 Y175 F5000

[gcode_macro _CALIBRATION_ZOFFSET]
gcode:
    M117 Calibrate Offset
    QUAD_GANTRY_LEVEL
    M140 S65
    G4 P500
    CLEAN_NOZZLE
    G4 P500
    M117 Z-offset calibration
    Z_OFFSET_CALIBRATION
    Z_OFFSET_APPLY_PROBE
    SAVE_CONFIG 

[delayed_gcode _auto_zoffset]
gcode:
    SAVE_VARIABLE VARIABLE=offsetadjust VALUE={'%05.2f' % (0)}
    _CALIBRATION_ZOFFSET

[gcode_macro _Delay_Calibrate]
gcode:
    UPDATE_DELAYED_GCODE ID=_auto_zoffset DURATION=1.0

[delayed_gcode TEST_BELT]
initial_duration: 0.3
gcode:
    {% set x_freq = printer.save_variables.variables.x_freq|float %}
    {% set y_freq = printer.save_variables.variables.y_freq|float %}
    {% set show_freq = printer.save_variables.variables.show_freq %}
    {% if show_freq == 1 %}
        M117 x {x_freq}, y {y_freq}
        SAVE_VARIABLE VARIABLE=show_freq VALUE=0
    {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target_temp = printer.heater_bed.target|int %}

    {action_respond_info("Starting Quad Gantry Leveling...")}


    # Home all axes immediately without waiting for the bed to heat
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        M117 Homing all axes...
        G28
    {% endif %}

    # Perform Quad Gantry Leveling (Second Pass after Bed is Heated)
    M117 Performing final Quad Gantry Leveling...
    QUAD_GANTRY_LEVEL_BASE


#[gcode_macro PROBE_CALIBRATE]
#rename_existing:PROBE_CALIBRATE_BASE
#gcode:
#    {% set current_target_temp  = printer.heater_bed.target|int %}
#    {% set z_offset_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}

#    {action_respond_info("z_offset_calibrate")}
#    {% if printer.heater_bed.temperature != z_offset_calibrate_temp %}
#        M140 S{z_offset_calibrate_temp}
#        {action_respond_info("The bed target temperature was not reached!")}
#        {action_respond_info("Bed heating...")}
#        M190 S{z_offset_calibrate_temp}
#    {% endif %}

#    G28
#    PROBE_CALIBRATE_BASE
#    TESTZ z=-4


#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BED_MESH_CALIBRATE_BASE
#gcode:
#    
#    {% set mesh_name = "default" %}
#    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
#    {% set current_target_temp  = printer.heater_bed.target|int %}

#    {action_respond_info("Check Heating!")}
#    {% if printer.heater_bed.temperature != mesh_calibrate_temp %}
#        {action_respond_info("The bed target temperature was not reached!")}
#        {action_respond_info("Bed heating...")}
#        {% if current_target_temp <= mesh_calibrate_temp %}
#          M190 S{mesh_calibrate_temp}
#        {% else %}
#          M190 S{current_target_temp}
#        {% endif %}
#    {% endif %}

#    {% if printer.toolhead.homed_axes|lower != "xyz" %}
#        G28
#    {% endif %}

#    BED_MESH_CLEAR
    
#    BED_MESH_CALIBRATE_BASE ADAPTIVE=1

#    {% if current_target_temp == 0 %}
#        M140 S0  
#    {% endif %}

#[gcode_macro G34]
#gcode:
#    BED_MESH_CLEAR 
#    {% if printer.toolhead.homed_axes|lower != "xyz" %}
#      G28
#    {% else %}
#      G28 Z
#    {% endif %}
#    QUAD_GANTRY_LEVEL 
#    G28 Z 
#    G0 X175 Y175 Z30 F3600

#[delayed_gcode bed_mesh_init]
#initial_duration: .01
#gcode:
#    BED_MESH_PROFILE LOAD=default

#[delayed_gcode _print_start_wait]
#gcode:
#    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
#        {action_respond_info("Prepare->Heating!")}
#    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
#        {action_respond_info("Heating->Start!")}
#    {% endif %}

#    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
#        START_PRINT
#    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancels the current print and parks the nozzle
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_retract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set current_z = printer.gcode_move.position.z|float %}

    ; Execute base cancel behavior
    CANCEL_PRINT_BASE

    M117 Print canceled!
    G91  ; Relative positioning

    ; Retract filament
    G1 E-{e_retract} F500

    ; Lift Z to avoid collision
    {% if (printer.gcode_move.position.z + 10) < z_max %}
        G1 Z10 F3000
    {% else %}
        G1 Z{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}

    G90  ; Absolute positioning

    ; Switch to T0 (toolhead 0) for extruder shutdown and parking
    T0

    ; Turn off all extruders
    {% for tool_nr in printer.toolchanger.tool_numbers %}
        M104 T{tool_nr} S0 ; Turn off extruder heater for tool {tool_nr}
    {% endfor %}

    ; Parking logic:
    ; If current Z > 150 mm, park at X175 Y340; otherwise, park at X175 Y0,
    ; ensuring that Z is raised to at least 100 mm before parking.
    {% if current_z > 150 %}
        M117 Parking at X175 Y340...
        G1 X175 Y340 F6000
    {% else %}
        M117 Parking at X175 Y0...
        {% if current_z < 100 %}
            G1 Z100 F3000
        {% endif %}
        G1 X175 Y0 F6000
    {% endif %}

    TURN_OFF_HEATERS

        M117 Print Complete - Turning Off LEDs
        SET_LED LED=T0_hotend_rgb RED=0 GREEN=0 BLUE=0
        SET_LED LED=T1_hotend_rgb RED=0 GREEN=0 BLUE=0

    ; Run exhaust fan for 10 minutes (600,000 ms) before shutting it off
    #M117 Running exhaust fan for 10 minutes...
    #G4 P600000
    _ALL_FAN_OFF

    CLEAR_PAUSE
    M84 X Y Z E  ; Disable motors

    M117 Ready
    {action_respond_info("Cancel Print Success!")}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0


[delayed_gcode _resume_wait]
gcode:
    {% if printer['gcode_macro RESUME'].execute|lower != 'false' %}
        RESUME
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set current_target_temp  = printer.extruder.target|int %}

    {% if printer.print_stats.state != "printing" %}
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Nozzle heating...
            {action_respond_info("Nozzle not hot enough!")}
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        M117 Extruding...
        G91 
        G1 E75 F300
        G1 E30 F150
        G1 E-2 F300
        G90
        M400
        M117 Filament loaded.
        M400
    {% else %}
        {action_respond_info("Don't load filament during printing!!!")}
    {% endif %}

    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set current_target_temp  = printer.extruder.target|int %}

    {% if printer.print_stats.state != "printing" %}
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Nozzle heating...
            {action_respond_info("Nozzle not hot enough!")}
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        M117 Retracting...
        G91
        G1 E+25 F300
        G1 E-10 F1500
        G1 E-20 F600
        M400
        G4 P3000
        G1 E-100 F300 
        G90
        M400
        M117 Filament ejected.
        M400
    {% else %}
        {action_respond_info("Don't unload filament during printing!!!")}
    {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:    
    {% set s = params.S|float %}    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-1} MAXIMUM={s+1}   
    {% endif %}
    
[gcode_macro M190]
rename_existing: M99190
gcode:    
    {% set s = params.S|float %}
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+1}  
    {% endif %}

    
[gcode_macro M600]
gcode:
    PAUSE STATE=filament_change

[gcode_macro UPDATE_LEDS]
description: Updates LED colors based on tool temperature and printing state
gcode:
    {% set tool_nr = printer.toolhead.extruder|default("extruder0") %}
    {% set temp = printer[tool_nr].temperature|default(0) %}
    {% set target = printer[tool_nr].target|default(0) %}
    {% set printing = printer.print_stats.state == "printing" %}

    ; Determine LED color based on conditions
    {% if printing %}
        #M117 Setting LEDs to WHITE (Printing)
        SET_LED LED=T0_hotend_rgb RED={255/255} GREEN={255/255} BLUE={255/255}
        SET_LED LED=T1_hotend_rgb RED={255/255} GREEN={255/255} BLUE={255/255}
    {% elif temp > 40 %}
        #M117 Setting LEDs to RED (Hot Nozzle)
        SET_LED LED=T0_hotend_rgb RED={255/255} GREEN={0/255} BLUE={0/255}
        SET_LED LED=T1_hotend_rgb RED={255/255} GREEN={0/255} BLUE={0/255}
    {% else %}
        #M117 Turning LEDs OFF (Cool Nozzle)
        SET_LED LED=T0_hotend_rgb RED={0/255} GREEN={0/255} BLUE={0/255}
        SET_LED LED=T1_hotend_rgb RED={0/255} GREEN={0/255} BLUE={0/255}
    {% endif %}

    ; Schedule next update in 2 seconds
    UPDATE_DELAYED_GCODE ID=led_update DURATION=2




#[shaketune]
 #result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
 #number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
 #keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
 #show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
 #timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.